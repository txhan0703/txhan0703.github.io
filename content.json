{"meta":{"title":"KoldTu's Blog","subtitle":"","description":"","author":"Kold Tu","url":"http://yoursite.com","root":"/"},"pages":[{"title":"分类","date":"2020-01-09T14:58:39.000Z","updated":"2020-01-12T08:32:41.520Z","comments":false,"path":"categories/index.html","permalink":"http://yoursite.com/categories/index.html","excerpt":"","text":""},{"title":"标签","date":"2020-01-09T14:46:22.000Z","updated":"2020-01-12T08:52:55.508Z","comments":false,"path":"tags/index.html","permalink":"http://yoursite.com/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"Spring学习笔记2：spring框架的搭建等","slug":"spring2","date":"2020-01-12T03:05:45.000Z","updated":"2020-02-01T14:56:53.196Z","comments":true,"path":"2020/01/12/spring2/","link":"","permalink":"http://yoursite.com/2020/01/12/spring2/","excerpt":"","text":"Spring Boot框架搭建和分类 spring boot代码编写框架","categories":[],"tags":[]},{"title":"Spring学习笔记1：spring框架的原则和基础","slug":"Spring学习笔记1：spring框架的原则和基础","date":"2020-01-12T02:51:32.000Z","updated":"2020-01-12T09:05:47.752Z","comments":true,"path":"2020/01/12/Spring学习笔记1：spring框架的原则和基础/","link":"","permalink":"http://yoursite.com/2020/01/12/Spring%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B01%EF%BC%9Aspring%E6%A1%86%E6%9E%B6%E7%9A%84%E5%8E%9F%E5%88%99%E5%92%8C%E5%9F%BA%E7%A1%80/","excerpt":"","text":"Spring框架搭建用idea搭好像挺容易，网上搜教程就是了 Spring基础配置spring框架本身有四大原则： 1：POJO：其实就是普通的java实体类（javabean） 2：依赖注入和基于接口编程 3：基于AOP的声明式编程 4：使用AOP和template减少模式化代码 依赖注入依赖注入指容器负责创建对象和维护对象间的依赖关系，而不是对象本身。","categories":[{"name":"-学习 -Spring","slug":"学习-Spring","permalink":"http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0-Spring/"}],"tags":[{"name":"-java -Spring","slug":"java-Spring","permalink":"http://yoursite.com/tags/java-Spring/"}]},{"title":"关于Git的一些笔记","slug":"2020-01-11-关于Git的一些笔记","date":"2020-01-11T08:03:30.000Z","updated":"2020-01-11T08:05:43.269Z","comments":true,"path":"2020/01/11/2020-01-11-关于Git的一些笔记/","link":"","permalink":"http://yoursite.com/2020/01/11/2020-01-11-%E5%85%B3%E4%BA%8EGit%E7%9A%84%E4%B8%80%E4%BA%9B%E7%AC%94%E8%AE%B0/","excerpt":"","text":"Git clone克隆一个版本库。大概的意思是在你本地的这个文件夹里设置了版本库，然后把云端的代码clone下来。","categories":[{"name":"-学习 -环境搭建","slug":"学习-环境搭建","permalink":"http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0-%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"}],"tags":[]},{"title":"论文阅读：Automated Decomposition of Build Targets","slug":"ICSE2015 Automated Decomposition of Build Targets","date":"2020-01-10T07:29:14.000Z","updated":"2020-03-01T03:49:25.622Z","comments":true,"path":"2020/01/10/ICSE2015 Automated Decomposition of Build Targets/","link":"","permalink":"http://yoursite.com/2020/01/10/ICSE2015%20Automated%20Decomposition%20of%20Build%20Targets/","excerpt":"","text":"ICSE2015 Automated Decomposition of Build Targets提出问题：构建过程中未充分利用（underutilized）的target的拆分和重构在代码大规模编译系统的构建过程中的target，有时存在未充分利用（underutilized）的现象。即有些target是未充分利用的，依赖这个target只是依赖其中一部分的文件。 target未充分利用的现象会导致一系列问题：代码不够模块化，不必要的构建和测试触发器，不必要的编译等待等待。如果可以将未充分利用的target分解成较小的目标，可以使得代码更加模块化，减少依赖等待时间从而加快编译速度。 识别和重构未充分利用的target是一项非常繁琐的工作，如何更好的识别和重构未充分利用的构建target是本文主要探讨的问题。 解决方案作者分析了Google的构建系统（Google build system），提出了两个工具DECOMPOSER和REFINER，用于识别和重构未充分利用的target。 DECOMPOSER:识别工具，建议如何将其分解为子target REFINER:重构工具，更新分解后的依赖项 DECOMPOSER：DECOMPOSER首先计算由目标的文件级依赖关系组成的图的强连通分量，然后逐次迭代的统一两个组件，直到只剩下两个组件。最后将剩下的组件提升为target。 DECOMPOSER有以下特性 1：依赖图 构建一个target内部文件级别的依赖图。 2：分解粒度 默认分解成两个子target，但可以人工配置分解为更多的target。 3：触发保存（Trigger Saving）： 作者定义了触发保存(Trigger Saving)的概念，令p1为更改仅影响t1部分文件的概率，p2为更改仅影响t2部分文件的概率，意在估算分解target、更新依赖关系后不会触发更改的相关目标的预期数目。 Trigger Saving 的值为p1(集合2-集合1)+p2(集合1-集合2) Decomposer算法步骤如下： 1：计算出给定target的引用图（即文件级别的依赖图）的强连通分量（SCC） 2：查找与每个SCC相关的target 3：逐次迭代的统一两个SCC，目的是最大程度的节省trigger saving，概念见上，直到剩下两组 4：更新构建规范 REFINER:给定一个target，通过DECOMPOSER分为两组后，REFINER会对它的每个依赖项先生成一个补丁，查明它依赖于其中的哪一组。 启发 依赖图不仅包括target依赖，每个target的文件级别依赖关系可以考虑可视化展示到前端。 参考DECOMPOSER工具的算法，给出拆分target建议，降低单个target的被依赖数，使得编译更加模块化，减少不必要的编译等待时间。 华为要求通过一些指标化的参数，来给出整个产品架构的建议，Trigger Saving的建模思路可以作为一个参考。","categories":[{"name":"-学习 -论文阅读","slug":"学习-论文阅读","permalink":"http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0-%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB/"}],"tags":[{"name":"-论文","slug":"论文","permalink":"http://yoursite.com/tags/%E8%AE%BA%E6%96%87/"}]},{"title":"论文阅读：Automated Decomposition of Build Targets","slug":"ICST2019 Efficient Automated Decomposition of Build Targets at Large-Scale","date":"2020-01-10T07:29:14.000Z","updated":"2020-03-01T03:49:50.998Z","comments":true,"path":"2020/01/10/ICST2019 Efficient Automated Decomposition of Build Targets at Large-Scale/","link":"","permalink":"http://yoursite.com/2020/01/10/ICST2019%20Efficient%20Automated%20Decomposition%20of%20Build%20Targets%20at%20Large-Scale/","excerpt":"","text":"ICST2019 Efficient Automated Decomposition of Build Targets at Large-Scale提出问题：构建过程中未充分利用（underutilized）的target的自动分解算法代码大规模构建系统中的组件（target）有时存在未充分利用（underutilized）的现象。即有些target是未充分利用的，依赖这个target只是依赖其中一部分的文件。本文提出了一种将未充分利用的组件自动查找和分解为一组较小的组件的方法工具AutoDecomposer。 之前的研究中已经提出了在输入最终组件数量时进行分解的方法，但作者提出的AutoDecomposer，该算法可以自动查找组件数量。 解决方案算法算法类似之前Valikan等人的2015那篇文章的贪心算法，统一两个组件，逐次迭代，标准是incurring loss最小，直到最后只剩下两个组件。 每次迭代记下损耗值并且存储组件图。基于这些中间值计算出结果。 详细步骤如下： 1：对整体dag求出所有强连通分量，对每个分量计算它依赖、被依赖的target 2：启发式生成组件：优先考虑寻找合并有共同上下游依赖的组件。优先合并根和叶子。 3：确定组件数目：把每次迭代的累计亏损记录下来画成散点图，到第一点和最后一点的连线的距离最长的点的横坐标即为最适合分割的组件数。 如图 损失函数损失函数的定义是 |D(C2)-D(C1)|·|T(C1)-T(C2)|+|D(C1)-D(C2)|·|T(C2)-T(C1)| （D：上层依赖，T：下层依赖） 表所有上层依赖项中未使用的传递依赖总数 启发参考AutoDecomposer工具的算法，给出拆分target建议，包括拆分成多少块。考虑在前端页面展示拆分后的架构图。","categories":[{"name":"-学习 -论文阅读","slug":"学习-论文阅读","permalink":"http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0-%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB/"}],"tags":[{"name":"-论文","slug":"论文","permalink":"http://yoursite.com/tags/%E8%AE%BA%E6%96%87/"}]},{"title":"论文阅读：Automated Decomposition of Build Targets","slug":"ICSME2018 Understanding, Debugging, and Optimizing Distributed Software Builds A Design Study","date":"2020-01-10T07:29:14.000Z","updated":"2020-03-01T03:49:37.806Z","comments":true,"path":"2020/01/10/ICSME2018 Understanding, Debugging, and Optimizing Distributed Software Builds A Design Study/","link":"","permalink":"http://yoursite.com/2020/01/10/ICSME2018%20Understanding,%20Debugging,%20and%20Optimizing%20Distributed%20Software%20Builds%20A%20Design%20Study/","excerpt":"","text":"ICSME2018 Understanding, Debugging, and Optimizing Distributed Software Builds A Design Study提出问题：帮助软件工程师更好的解决使用大型分布式构建系统时遇到的理解、调试、优化等问题目前使用大型现代构建系统的开发人员，都或多或少面临以下问题：构建失败和构建时间过长的故障排除。面对这些问题时，开发人员很难处理。作者在这篇论文中，旨在了解开发人员面对分布式构建所面临挑战的本质，并设计一种工具(BuildExplorer)来帮助人们更好地理解和解决与构建相关的问题。 作者的研究主要针对以下两个问题： 开发人员使用现代的缓存和分布式构建系统会面临哪些挑战？ 哪些挑战需要工具支持开发者理解，调试和优化？ 调查研究作者在Microsoft进行了调查研究，揭示了工程师在理解，调试和优化CDBS（大型分布式构建系统）方面面临的挑战，并帮助加深了对他们的实践，需求，问题和要求的了解。 这些见解为迭代设计和开发BuildExplorer提供了支持。确定了工具的两个主要用例： 用例1针对特定的性能问题调试构建会话。此任务需要对各种数据进行深入分析。 用例2为客户项目优化端到端构建的性能。该任务通常会导致有关软件体系结构重构的建议。 BuildExplorerBuildExplorer有以下几个特性： 1：单页面视图，把所有内容放在一个页面内 2：构建摘要视图，表示构建的每个阶段花费的时间统计等 3：依赖关系图，用直方图和折线图的形式表该层target的target数目和target构建时间 4：target属性可视化，展示target的依赖 5：最长关键路径可视化，展示最长关键路径的target层和时间 6：目标列表、目标详细信息等等… 启发 过长、连续的构建链或者过慢的单个构建target都可能造成昂贵的构建瓶颈。在构建架构的参数指标上，可以把这两点作为重要的评判标准。构建链连续长度过长时或者单个构建target时间过高的情况下给予提示。 可视化方面，考虑在targettracing中添加更多视图。例如构建阶段时间统计(B)，依赖关系图(C)，最长关键路径(D)，参考图片","categories":[{"name":"-学习 -论文阅读","slug":"学习-论文阅读","permalink":"http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0-%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB/"}],"tags":[{"name":"-论文","slug":"论文","permalink":"http://yoursite.com/tags/%E8%AE%BA%E6%96%87/"}]},{"title":"论文阅读：Automated Decomposition of Build Targets","slug":"论文阅读：Automated Decomposition of Build Targets","date":"2020-01-10T07:29:14.000Z","updated":"2020-02-12T02:26:31.289Z","comments":true,"path":"2020/01/10/论文阅读：Automated Decomposition of Build Targets/","link":"","permalink":"http://yoursite.com/2020/01/10/%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB%EF%BC%9AAutomated%20Decomposition%20of%20Build%20Targets/","excerpt":"ICSE2015 Automated Decomposition of Build Targets研究背景&amp;简介在代码大规模编译系统的构建过程中的target，有时存在未充分利用（underutilized）的现象。即有些target是未充分利用的，依赖这个target只是依赖其中一部分的文件。 target未充分利用的现象会导致一系列问题：代码不够模块化，不必要的构建和测试触发器，不必要的编译等待等待。如果可以将未充分利用的target分解成较小的目标，可以使得代码更加模块化，减少依赖等待时间从而加快编译速度。 作者分析了Google的构建系统（Google build system），提出了两个工具DECOMPOSER和REFINER，用于识别和重构未充分利用的目标。 （该论文与我组目前的研究方向十分契合，虽然需要分析的构建系统不一样但思路十分值得借鉴。）","text":"ICSE2015 Automated Decomposition of Build Targets研究背景&amp;简介在代码大规模编译系统的构建过程中的target，有时存在未充分利用（underutilized）的现象。即有些target是未充分利用的，依赖这个target只是依赖其中一部分的文件。 target未充分利用的现象会导致一系列问题：代码不够模块化，不必要的构建和测试触发器，不必要的编译等待等待。如果可以将未充分利用的target分解成较小的目标，可以使得代码更加模块化，减少依赖等待时间从而加快编译速度。 作者分析了Google的构建系统（Google build system），提出了两个工具DECOMPOSER和REFINER，用于识别和重构未充分利用的目标。 （该论文与我组目前的研究方向十分契合，虽然需要分析的构建系统不一样但思路十分值得借鉴。） 构建系统在构建过程中，构建系统识别target的步骤是： 构建依赖的target-&gt;构建","categories":[{"name":"-学习 -论文阅读","slug":"学习-论文阅读","permalink":"http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0-%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB/"}],"tags":[{"name":"-论文","slug":"论文","permalink":"http://yoursite.com/tags/%E8%AE%BA%E6%96%87/"}]},{"title":"2019.12.11会议记录","slug":"2019.12.11会议记录","date":"2020-01-09T13:03:30.000Z","updated":"2020-01-12T08:55:41.241Z","comments":true,"path":"2020/01/09/2019.12.11会议记录/","link":"","permalink":"http://yoursite.com/2020/01/09/2019.12.11%E4%BC%9A%E8%AE%AE%E8%AE%B0%E5%BD%95/","excerpt":"","text":"2019.12.11一：第一阶段完善例如：1：processtracing展开最深结点的层数可以自行选择，提供灵活的层级展示。 2：targettracing增加一个搜索功能，搜索target名可以查看相关依赖 3：targettracing图例颜色需要固定，target的类型只有固定几种，遇到新的类型再支持。 4：targettracing的箭头需要改清晰一点。 5：target依赖关系比较复杂、target数量比较多的情况需要展示在externalproject视图上。 externalproject视图需要加一些信息。 二：下一阶段思路1：对于耗时较长的进程，面向这些进程，显示其文件调用、网络I/O、内存情况等数据情况，反应当前耗时长的原因，给用户提供优化指导 2：能够分析产品架构，从构建层面上进行分析，抽象出一些概念出来。能够通过一些指标化的参数（构建架构指标），来给出产品平铺化或者平铺度不够的一些建议。 构建依赖关系能够呈现产品的关系，构建建议、构建指标、构建问题能够在实现的过程中反馈用户，指引优化。 例如：优化重点：耗时较长的target、依赖较多的target，进行详细分析 架构方面：target依赖架构的整体分析。主要是一个度量的问题。度量指标、理论基础。提供一个理论。架构的复杂度，优化度。依赖的量化。 3：分析历史构建target情况，多次历史构建结构的性能趋势分析。基于性能趋势分析给出预警。 4：分析target中文件的重复度。通过历史构建日志。 5：头文件依赖的合理性。是否有包含不需要的头文件。gcc -i -mm 消除不需要的依赖。 6：maven依赖关系？ 产品化建议：1：进程数据映射到数据对象和数据结构，匹配到用户，返回到用户视角 最终目的：构筑以软件构建为基础的构建平台，帮助用户重构和优化软件","categories":[{"name":"-学习 -环境搭建","slug":"学习-环境搭建","permalink":"http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0-%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"}],"tags":[]},{"title":"尝试着用下hexo框架搭建博客平台","slug":"尝试着用下hexo框架搭建博客平台","date":"2020-01-09T13:03:30.000Z","updated":"2020-02-01T14:32:26.644Z","comments":true,"path":"2020/01/09/尝试着用下hexo框架搭建博客平台/","link":"","permalink":"http://yoursite.com/2020/01/09/%E5%B0%9D%E8%AF%95%E7%9D%80%E7%94%A8%E4%B8%8Bhexo%E6%A1%86%E6%9E%B6%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E5%B9%B3%E5%8F%B0/","excerpt":"安装hexo组件首先容我吐槽一下，这篇文章是一边安装hexo、搭建hexo-next主题时候一边写的，安装的过程比我想象中的还是麻烦太多太多了我佛了。（当然主要是自己踩了很多的坑） 首先保证全局安装git以及node.js（npm），这个不多赘述，直接上git和node.js的官网下载安装就行，网上也有很多教程，安装时也有图形化的提示，直接照着提示来就行。 一定要保证全局安装。 然后建立一个空文件夹，右键-&gt;Git bash here，一定要是新建的空的文件夹，后面称之为根目录。","text":"安装hexo组件首先容我吐槽一下，这篇文章是一边安装hexo、搭建hexo-next主题时候一边写的，安装的过程比我想象中的还是麻烦太多太多了我佛了。（当然主要是自己踩了很多的坑） 首先保证全局安装git以及node.js（npm），这个不多赘述，直接上git和node.js的官网下载安装就行，网上也有很多教程，安装时也有图形化的提示，直接照着提示来就行。 一定要保证全局安装。 然后建立一个空文件夹，右键-&gt;Git bash here，一定要是新建的空的文件夹，后面称之为根目录。 在git bash中输入以下指令并运行 1$ npm install -g hexo 下载安装好hexo后，运行 1$ hexo init 初始化hexo组件，至此一个简单的hexo博客的框架已经搭建好了。 安装后的结果如图所示 修改配置文件站点配置文件为hexo根目录下的_config.yml，我们称之为站点配置文件，要注意的是后面还有一个主题配置文件，文件名一样但路径不同，要注意区分。 可以在站点配置文件_config.yml中，找到以下片段并修改 12345678910title: XXX&#39;s Blogauthor: XXXlanguage: zh-CH #中文theme: nextdeploy:type: gitrepo: git@github.com:XXX&#x2F;XXX.github.io.git #你的GitHub网址branch: master 本地部署运行以下指令，即可在本地直接部署hexo博客 123hexo cleanhexo ghexo s 访问http://localhost:4000 即可查看主页 修改配置文件和markdown文章时，一般只需要刷新就可以展示修改后的内容。 如果文件名等发生改变，需要重启本地服务器，也就是再运行一次以上指令。 安装及修改主题hexo基础框架搭建好后，我们可能需要更加完善的博客功能和更加美观的界面。 安装hexo-indigo主题插件hexo-indigo是一款基于hexo的主题插件，包含更完善的功能和更美观的主题界面，访问hexo-theme-material-indigo的主页wiki，https://github.com/yscoder/hexo-theme-indigo/wiki，获取安装教程 需要在themes/下安装主题，在根目录下运行git bash，运行以下指令： 1git clone https:&#x2F;&#x2F;github.com&#x2F;yscoder&#x2F;hexo-theme-indigo.git themes&#x2F;indigo 下载indigo主题。 在站点配置文件_config.yml中修改： 1theme: indigo 即可启用indigo主题 其余必要的修改见上面提到的主页wiki，主题配置文件themes/indigo/_config.yml中有必要的注释，方便易懂每个配置项是什么。 安装hexo-next主题插件hexo-next是另一款基于hexo的主题插件，使用方法类似，在站点配置文件_config.yml中修改：， 1theme: next 可以访问hexo-next的主页http://theme-next.iissnan.com/getting-started.html ，获取安装教程 配置文件hexo框架安装了主题后，整体有两个配置文件。 一个是站点配置文件_config.yml 一个是主题配置文件themes/indigo/_config.yml 此后有很多需要修改的地方，要注意是修改哪个配置文件。 撰写文章hexo框架的博客文章来源于博客目录下的/source/_post里的.md文件 写好自己的md文件放到这个文件夹下，就可以在博客页面上展示了。 建议用typora来写自己的markdown文件，也就是写文章，操作方便。 撰写的文章在前端会全部展示，如果想展示一部分，其它的隐藏起来用阅读全文按钮包装，则只需要在自己的md文件里加上 1&lt;!--more--&gt; 这个标签以后的内容会隐藏起来，点击阅读全文才会显示。 效果如图。 插入图片默认的Hexo是无法插入图片的。需要安装hexo图片插件 运行以下指令： 1npm install hexo-asset-image --save 安装好后，打开站点配置文件_config.yml，修改内容 1post_asset_folder: true","categories":[{"name":"-学习 -环境搭建","slug":"学习-环境搭建","permalink":"http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0-%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"}],"tags":[{"name":"-hexo","slug":"hexo","permalink":"http://yoursite.com/tags/hexo/"}]}]}