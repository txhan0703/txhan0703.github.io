{"meta":{"title":"KoldTu's Blog","subtitle":"","description":"","author":"Kold Tu","url":"http://yoursite.com","root":"/"},"pages":[{"title":"分类","date":"2020-01-09T14:58:39.000Z","updated":"2020-01-12T08:32:41.520Z","comments":false,"path":"categories/index.html","permalink":"http://yoursite.com/categories/index.html","excerpt":"","text":""},{"title":"tags","date":"2020-01-09T14:46:22.000Z","updated":"2020-01-12T08:19:04.073Z","comments":true,"path":"tags/index.html","permalink":"http://yoursite.com/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"spring2","slug":"spring2","date":"2020-01-12T03:05:45.000Z","updated":"2020-01-12T03:18:10.614Z","comments":true,"path":"2020/01/12/spring2/","link":"","permalink":"http://yoursite.com/2020/01/12/spring2/","excerpt":"","text":"测试添加图片 image-20200109223212975","categories":[],"tags":[]},{"title":"spring1","slug":"spring1","date":"2020-01-12T02:51:32.000Z","updated":"2020-01-12T02:51:32.601Z","comments":true,"path":"2020/01/12/spring1/","link":"","permalink":"http://yoursite.com/2020/01/12/spring1/","excerpt":"","text":"","categories":[],"tags":[]},{"title":"论文阅读：Automated Decomposition of Build Targets","slug":"4","date":"2020-01-10T07:29:14.000Z","updated":"2020-01-11T07:38:32.517Z","comments":true,"path":"2020/01/10/4/","link":"","permalink":"http://yoursite.com/2020/01/10/4/","excerpt":"研究背景&amp;简介在代码大规模编译系统的构建过程中的target，有时存在未充分利用（underutilized）的现象。即有些target是未充分利用的，依赖这个target只是依赖其中一部分的文件。 target未充分利用的现象会导致一系列问题：代码不够模块化，不必要的构建和测试触发器，不必要的编译等待等待。如果可以将未充分利用的target分解成较小的目标，可以使得代码更加模块化，减少依赖等待时间从而加快编译速度。 作者分析了Google的构建系统（Google build system），提出了两个工具DECOMPOSER和REFINER，用于识别和重构未充分利用的目标。 （该论文与我组目前的研究方向十分契合，虽然需要分析的构建系统不一样但思路十分值得借鉴。）","text":"研究背景&amp;简介在代码大规模编译系统的构建过程中的target，有时存在未充分利用（underutilized）的现象。即有些target是未充分利用的，依赖这个target只是依赖其中一部分的文件。 target未充分利用的现象会导致一系列问题：代码不够模块化，不必要的构建和测试触发器，不必要的编译等待等待。如果可以将未充分利用的target分解成较小的目标，可以使得代码更加模块化，减少依赖等待时间从而加快编译速度。 作者分析了Google的构建系统（Google build system），提出了两个工具DECOMPOSER和REFINER，用于识别和重构未充分利用的目标。 （该论文与我组目前的研究方向十分契合，虽然需要分析的构建系统不一样但思路十分值得借鉴。） 构建系统在构建过程中，构建系统识别target的步骤是： 构建依赖的target-&gt;构建","categories":[{"name":"-学习 -论文阅读","slug":"学习-论文阅读","permalink":"http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0-%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB/"}],"tags":[]},{"title":"尝试着用下hexo框架和hexo next主题搭建博客平台","slug":"1","date":"2020-01-09T13:03:30.000Z","updated":"2020-01-12T07:54:33.669Z","comments":true,"path":"2020/01/09/1/","link":"","permalink":"http://yoursite.com/2020/01/09/1/","excerpt":"安装hexo组件首先容我吐槽一下，这篇文章是一边安装hexo、搭建hexo-next主题时候一边写的，安装的过程比我想象中的还是麻烦太多太多了我佛了。（当然主要是自己踩了很多的坑） 首先保证全局安装git以及node.js（npm），这个不多赘述，网上有很多教程，也很容易找到图形化的提示，直接照着提示来就行。 然后建立一个空文件夹，右键-&gt;Git bash here，一定要是新建的空的文件夹。","text":"安装hexo组件首先容我吐槽一下，这篇文章是一边安装hexo、搭建hexo-next主题时候一边写的，安装的过程比我想象中的还是麻烦太多太多了我佛了。（当然主要是自己踩了很多的坑） 首先保证全局安装git以及node.js（npm），这个不多赘述，网上有很多教程，也很容易找到图形化的提示，直接照着提示来就行。 然后建立一个空文件夹，右键-&gt;Git bash here，一定要是新建的空的文件夹。 在git bash中输入以下指令并运行 1$ npm install -g hexo 下载安装好hexo后，运行 1$ hexo init 初始化hexo组件，至此一个简单的hexo博客的框架已经搭建好了。 可以在站点配置文件_config.yml中，找到以下片段并修改 安装hexo-next及修改主题hexo基础框架搭建好后，我们可能需要更加完善的博客功能和更加美观的界面。 安装hexo-nexthexo-next是一款基于hexo的主题插件，包含更完善的功能和更美观的主题界面，在站点文件夹下的/themes下安装，并且修改上方提过的站点配置文件_config.yml， 可以访问hexo-next的主页http://theme-next.iissnan.com/getting-started.html ，获取安装教程 安装后的结果如图所示 图片 配置文件hexo框架安装了hexo-next主题后，整体有两个配置文件。 一个是 撰写文章hexo框架的博客文章来源于博客目录下的/source/_post里的.md文件 写好自己的md文件放到这个文件夹下，就可以在博客页面上展示了。 建议用typora来写自己的markdown文件，也就是写文章，操作方便。 撰写的文章在前端会全部展示，如果想展示一部分，其它的隐藏起来用阅读全文按钮包装，则只需要在自己的md文件里加上 1&lt;!--more--&gt; 这个标签以后的内容会隐藏起来，点击阅读全文才会显示。 插入图片默认的Hexo是无法插入图片的。需要安装hexo图片插件 运行以下指令： 1npm install hexo-asset-image --save 安装好后，打开站点配置文件_config.yml，修改内容","categories":[{"name":"-学习 -环境搭建","slug":"学习-环境搭建","permalink":"http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0-%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"}],"tags":[]},{"title":"2019.12.11会议记录","slug":"3","date":"2020-01-09T13:03:30.000Z","updated":"2020-01-09T14:53:43.134Z","comments":true,"path":"2020/01/09/3/","link":"","permalink":"http://yoursite.com/2020/01/09/3/","excerpt":"","text":"2019.12.11一：第一阶段完善例如：1：processtracing展开最深结点的层数可以自行选择，提供灵活的层级展示。 2：targettracing增加一个搜索功能，搜索target名可以查看相关依赖 3：targettracing图例颜色需要固定，target的类型只有固定几种，遇到新的类型再支持。 4：targettracing的箭头需要改清晰一点。 5：target依赖关系比较复杂、target数量比较多的情况需要展示在externalproject视图上。 externalproject视图需要加一些信息。 二：下一阶段思路1：对于耗时较长的进程，面向这些进程，显示其文件调用、网络I/O、内存情况等数据情况，反应当前耗时长的原因，给用户提供优化指导 2：能够分析产品架构，从构建层面上进行分析，抽象出一些概念出来。能够通过一些指标化的参数（构建架构指标），来给出产品平铺化或者平铺度不够的一些建议。 构建依赖关系能够呈现产品的关系，构建建议、构建指标、构建问题能够在实现的过程中反馈用户，指引优化。 例如：优化重点：耗时较长的target、依赖较多的target，进行详细分析 架构方面：target依赖架构的整体分析。主要是一个度量的问题。度量指标、理论基础。提供一个理论。架构的复杂度，优化度。依赖的量化。 3：分析历史构建target情况，多次历史构建结构的性能趋势分析。基于性能趋势分析给出预警。 4：分析target中文件的重复度。通过历史构建日志。 5：头文件依赖的合理性。是否有包含不需要的头文件。gcc -i -mm 消除不需要的依赖。 6：maven依赖关系？ 产品化建议：1：进程数据映射到数据对象和数据结构，匹配到用户，返回到用户视角 最终目的：构筑以软件构建为基础的构建平台，帮助用户重构和优化软件","categories":[{"name":"-学习 -环境搭建","slug":"学习-环境搭建","permalink":"http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0-%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"}],"tags":[]},{"title":"助教lab4","slug":"2","date":"2020-01-09T13:03:30.000Z","updated":"2020-01-09T14:56:05.440Z","comments":true,"path":"2020/01/09/2/","link":"","permalink":"http://yoursite.com/2020/01/09/2/","excerpt":"","text":"Lab 4 BST(Binary Search Tree) Xuanhan Tu 16 Oct 2019 IntroductionThis lab is designed to help you get familiar with Binary Search Tree , a useful data structure . Your task in this lab is to implement BST individually. SpecificationIn this part, you can create a data type TreeNode to be the node of a binary search tree. following API: 1234567891011class TreeNode &#123; int value; TreeNode left; TreeNode right; public TreeNode(int value) &#123; this.value = value; left = null; right = null; &#125;&#125; And then, you can use TreeNode to create BST structure with the following API: 12345678910111213141516171819202122public class BinSearchTreeDemo &#123; public TreeNode root; //Find the right key public TreeNode find(int key) //Insert node into BST public boolean insert(TreeNode root,int x) //Remove a node from BST public boolean remove(TreeNode root,int x) //preOrder print Tree public void preOrder_iterator(TreeNode root) //inOrder print Tree public void inOrder_iterator(TreeNode root) //postOrder print Tree public void postOrder_iterator(TreeNode root) //return the kth smallest node of the tree public TreeNode kthSmallest(TreeNode root, int k) //return the depth of the tree public int FindTreeDeep(TreeNode root) //Find the closest value to target on the tree public int closestValue(TreeNode root, double target)&#125; Test CaseNow, you have implemented the structure of BST. Your task is to run test case correctly. 1234567891011121314151617181920212223242526272829303132333435363738public class BSTTestDemo &#123; public static void main(String[] args) &#123; //Create BST int[] arr=new int[]&#123;2,1,3,4,14,8,9,5,12&#125;; BinSerachTreeDemo bst = new BinSerachTreeDemo(); for(int i=0;i&lt;arr.length;i++) &#123; bst.insert(new TreeNode(arr[i])); &#125; TreeNode root=bst.root; //Test BST functions System.out.println((bst.find(4)==null)? \"null\": \"find:\"+bst.find(4).value); bst.inOrder_iterator(root); bst.preOrder_iterator(root); System.out.println(); //Insert System.out.println((bst.find(7)==null)? \"null\": \"find:\"+bst.find(7).value); bst.insert(root,7); System.out.println((bst.find(7)==null)? \"null\": \"find:\"+bst.find(7).value); bst.inOrder_iterator(root); bst.postOrder_iterator(root); bst.preOrder_iterator(root); //Delete bst.remove(root,8); bst.remove(root,4); System.out.println(); bst.inOrder_iterator(root); //Other functions System.out.println(\"The depth of the tree:\"+bst.FindTreeDeep(root)); System.out.println(bst.kthSmallest(root,3)); System.out.println(bst.closestValue(root,6.5)); &#125;&#125; The output is as follow: 1234567891011121314find:41 2 3 4 5 8 9 12 142 1 3 4 14 8 5 9 12nullfind:71 2 3 4 5 7 8 9 12 141 7 5 12 9 8 14 4 3 22 1 3 4 14 8 5 7 9 121 2 3 5 7 9 12 14The depth of the tree:637 BonusTraversal can be of two types: recursive and non-recursive. Try to traverse the tree with both of the two methods. Deadline 2019/10/18 18:00Please compress your code and upload into the FTP server with filename in formatYourStudentID.zip.","categories":[{"name":"-学习 -代码题/lab","slug":"学习-代码题-lab","permalink":"http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0-%E4%BB%A3%E7%A0%81%E9%A2%98-lab/"}],"tags":[]}]}