<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>KoldTu&#39;s Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-01-12T03:18:10.614Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Kold Tu</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>spring2</title>
    <link href="http://yoursite.com/2020/01/12/spring2/"/>
    <id>http://yoursite.com/2020/01/12/spring2/</id>
    <published>2020-01-12T03:05:45.000Z</published>
    <updated>2020-01-12T03:18:10.614Z</updated>
    
    <content type="html"><![CDATA[<h2 id="测试添加图片"><a href="#测试添加图片" class="headerlink" title="测试添加图片"></a>测试添加图片</h2><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2020/01/12/spring2/image-20200109223212975.png" alt="image-20200109223212975" title>                </div>                <div class="image-caption">image-20200109223212975</div>            </figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;测试添加图片&quot;&gt;&lt;a href=&quot;#测试添加图片&quot; class=&quot;headerlink&quot; title=&quot;测试添加图片&quot;&gt;&lt;/a&gt;测试添加图片&lt;/h2&gt;&lt;figure class=&quot;image-bubble&quot;&gt;
                &lt;div class=
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>spring1</title>
    <link href="http://yoursite.com/2020/01/12/spring1/"/>
    <id>http://yoursite.com/2020/01/12/spring1/</id>
    <published>2020-01-12T02:51:32.000Z</published>
    <updated>2020-01-12T02:51:32.601Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>论文阅读：Automated Decomposition of Build Targets</title>
    <link href="http://yoursite.com/2020/01/10/4/"/>
    <id>http://yoursite.com/2020/01/10/4/</id>
    <published>2020-01-10T07:29:14.000Z</published>
    <updated>2020-01-11T07:38:32.517Z</updated>
    
    <content type="html"><![CDATA[<h2 id="研究背景-amp-简介"><a href="#研究背景-amp-简介" class="headerlink" title="研究背景&amp;简介"></a>研究背景&amp;简介</h2><p>在代码大规模编译系统的构建过程中的target，有时存在未充分利用（underutilized）的现象。即有些target是未充分利用的，依赖这个target只是依赖其中一部分的文件。</p><p>target未充分利用的现象会导致一系列问题：代码不够模块化，不必要的构建和测试触发器，不必要的编译等待等待。如果可以将未充分利用的target分解成较小的目标，可以使得代码更加模块化，减少依赖等待时间从而加快编译速度。</p><p>作者分析了Google的构建系统（Google build system），提出了两个工具DECOMPOSER和REFINER，用于识别和重构未充分利用的目标。</p><p>（该论文与我组目前的研究方向十分契合，虽然需要分析的构建系统不一样但思路十分值得借鉴。）</p><a id="more"></a><h2 id="构建系统"><a href="#构建系统" class="headerlink" title="构建系统"></a>构建系统</h2><p>在构建过程中，构建系统识别target的步骤是：</p><p>构建依赖的target-&gt;构建</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;研究背景-amp-简介&quot;&gt;&lt;a href=&quot;#研究背景-amp-简介&quot; class=&quot;headerlink&quot; title=&quot;研究背景&amp;amp;简介&quot;&gt;&lt;/a&gt;研究背景&amp;amp;简介&lt;/h2&gt;&lt;p&gt;在代码大规模编译系统的构建过程中的target，有时存在未充分利用（underutilized）的现象。即有些target是未充分利用的，依赖这个target只是依赖其中一部分的文件。&lt;/p&gt;
&lt;p&gt;target未充分利用的现象会导致一系列问题：代码不够模块化，不必要的构建和测试触发器，不必要的编译等待等待。如果可以将未充分利用的target分解成较小的目标，可以使得代码更加模块化，减少依赖等待时间从而加快编译速度。&lt;/p&gt;
&lt;p&gt;作者分析了Google的构建系统（Google build system），提出了两个工具DECOMPOSER和REFINER，用于识别和重构未充分利用的目标。&lt;/p&gt;
&lt;p&gt;（该论文与我组目前的研究方向十分契合，虽然需要分析的构建系统不一样但思路十分值得借鉴。）&lt;/p&gt;
    
    </summary>
    
    
      <category term="-学习 -论文阅读" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0-%E8%AE%BA%E6%96%87%E9%98%85%E8%AF%BB/"/>
    
    
  </entry>
  
  <entry>
    <title>尝试着用下hexo框架和hexo next主题搭建博客平台</title>
    <link href="http://yoursite.com/2020/01/09/1/"/>
    <id>http://yoursite.com/2020/01/09/1/</id>
    <published>2020-01-09T13:03:30.000Z</published>
    <updated>2020-01-12T07:54:33.669Z</updated>
    
    <content type="html"><![CDATA[<h2 id="安装hexo组件"><a href="#安装hexo组件" class="headerlink" title="安装hexo组件"></a>安装hexo组件</h2><p>首先容我吐槽一下，这篇文章是一边安装hexo、搭建hexo-next主题时候一边写的，安装的过程比我想象中的还是麻烦太多太多了我佛了。（当然主要是自己踩了很多的坑）</p><p>首先保证全局安装git以及node.js（npm），这个不多赘述，网上有很多教程，也很容易找到图形化的提示，直接照着提示来就行。</p><p>然后建立一个空文件夹，右键-&gt;Git bash here，一定要是新建的空的文件夹。</p><a id="more"></a><p>在git bash中输入以下指令并运行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -g hexo</span><br></pre></td></tr></table></figure><p>下载安装好hexo后，运行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo init</span><br></pre></td></tr></table></figure><p>初始化hexo组件，至此一个简单的hexo博客的框架已经搭建好了。</p><p>可以在站点配置文件_config.yml中，找到以下片段并修改</p><h2 id="安装hexo-next及修改主题"><a href="#安装hexo-next及修改主题" class="headerlink" title="安装hexo-next及修改主题"></a>安装hexo-next及修改主题</h2><p>hexo基础框架搭建好后，我们可能需要更加完善的博客功能和更加美观的界面。</p><h3 id="安装hexo-next"><a href="#安装hexo-next" class="headerlink" title="安装hexo-next"></a>安装hexo-next</h3><p>hexo-next是一款基于hexo的主题插件，包含更完善的功能和更美观的主题界面，在站点文件夹下的/themes下安装，并且修改上方提过的站点配置文件_config.yml，</p><p>可以访问hexo-next的主页<a href="http://theme-next.iissnan.com/getting-started.html" target="_blank" rel="noopener">http://theme-next.iissnan.com/getting-started.html</a> ，获取安装教程</p><p>安装后的结果如图所示</p><figure class="image-bubble">                <div class="img-lightbox">                    <div class="overlay"></div>                    <img src="/2020/01/09/1/image-20200109223212975.png" alt="图片" title>                </div>                <div class="image-caption">图片</div>            </figure><h3 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h3><p>hexo框架安装了hexo-next主题后，整体有两个配置文件。</p><p>一个是</p><h2 id="撰写文章"><a href="#撰写文章" class="headerlink" title="撰写文章"></a>撰写文章</h2><p>hexo框架的博客文章来源于博客目录下的/source/_post里的.md文件</p><p>写好自己的md文件放到这个文件夹下，就可以在博客页面上展示了。</p><p>建议用typora来写自己的markdown文件，也就是写文章，操作方便。</p><p>撰写的文章在前端会全部展示，如果想展示一部分，其它的隐藏起来用阅读全文按钮包装，则只需要在自己的md文件里加上</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--more--&gt;</span><br></pre></td></tr></table></figure><p>这个标签以后的内容会隐藏起来，点击阅读全文才会显示。</p><h2 id="插入图片"><a href="#插入图片" class="headerlink" title="插入图片"></a>插入图片</h2><p>默认的Hexo是无法插入图片的。需要安装hexo图片插件</p><p>运行以下指令：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-asset-image --save</span><br></pre></td></tr></table></figure><p>安装好后，打开站点配置文件_config.yml，修改内容</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;安装hexo组件&quot;&gt;&lt;a href=&quot;#安装hexo组件&quot; class=&quot;headerlink&quot; title=&quot;安装hexo组件&quot;&gt;&lt;/a&gt;安装hexo组件&lt;/h2&gt;&lt;p&gt;首先容我吐槽一下，这篇文章是一边安装hexo、搭建hexo-next主题时候一边写的，安装的过程比我想象中的还是麻烦太多太多了我佛了。（当然主要是自己踩了很多的坑）&lt;/p&gt;
&lt;p&gt;首先保证全局安装git以及node.js（npm），这个不多赘述，网上有很多教程，也很容易找到图形化的提示，直接照着提示来就行。&lt;/p&gt;
&lt;p&gt;然后建立一个空文件夹，右键-&amp;gt;Git bash here，一定要是新建的空的文件夹。&lt;/p&gt;
    
    </summary>
    
    
      <category term="-学习 -环境搭建" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0-%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    
    
  </entry>
  
  <entry>
    <title>2019.12.11会议记录</title>
    <link href="http://yoursite.com/2020/01/09/3/"/>
    <id>http://yoursite.com/2020/01/09/3/</id>
    <published>2020-01-09T13:03:30.000Z</published>
    <updated>2020-01-09T14:53:43.134Z</updated>
    
    <content type="html"><![CDATA[<h2 id="2019-12-11"><a href="#2019-12-11" class="headerlink" title="2019.12.11"></a>2019.12.11</h2><h3 id="一：第一阶段完善"><a href="#一：第一阶段完善" class="headerlink" title="一：第一阶段完善"></a>一：第一阶段完善</h3><p>例如：1：processtracing展开最深结点的层数可以自行选择，提供灵活的层级展示。</p><p>2：targettracing增加一个搜索功能，搜索target名可以查看相关依赖</p><p>3：targettracing图例颜色需要固定，target的类型只有固定几种，遇到新的类型再支持。</p><p>4：targettracing的箭头需要改清晰一点。</p><p>5：target依赖关系比较复杂、target数量比较多的情况需要展示在externalproject视图上。</p><p>externalproject视图需要加一些信息。</p><h3 id="二：下一阶段思路"><a href="#二：下一阶段思路" class="headerlink" title="二：下一阶段思路"></a>二：下一阶段思路</h3><p>1：对于耗时较长的进程，面向这些进程，显示其文件调用、网络I/O、内存情况等数据情况，反应当前耗时长的原因，给用户提供优化指导</p><p>2：能够分析产品架构，从构建层面上进行分析，抽象出一些概念出来。能够通过一些指标化的参数（构建架构指标），来给出产品平铺化或者平铺度不够的一些建议。</p><p>构建依赖关系能够呈现产品的关系，构建建议、构建指标、构建问题能够在实现的过程中反馈用户，指引优化。</p><p>例如：优化重点：耗时较长的target、依赖较多的target，进行详细分析</p><p>架构方面：target依赖架构的整体分析。主要是一个度量的问题。度量指标、理论基础。提供一个理论。架构的复杂度，优化度。依赖的量化。</p><p>3：分析历史构建target情况，多次历史构建结构的性能趋势分析。基于性能趋势分析给出预警。</p><p>4：分析target中文件的重复度。通过历史构建日志。</p><p>5：头文件依赖的合理性。是否有包含不需要的头文件。gcc -i -mm 消除不需要的依赖。</p><p>6：maven依赖关系？</p><h3 id="产品化建议："><a href="#产品化建议：" class="headerlink" title="产品化建议："></a>产品化建议：</h3><p>1：进程数据映射到数据对象和数据结构，匹配到用户，返回到用户视角</p><p>最终目的：构筑以软件构建为基础的构建平台，帮助用户重构和优化软件</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;2019-12-11&quot;&gt;&lt;a href=&quot;#2019-12-11&quot; class=&quot;headerlink&quot; title=&quot;2019.12.11&quot;&gt;&lt;/a&gt;2019.12.11&lt;/h2&gt;&lt;h3 id=&quot;一：第一阶段完善&quot;&gt;&lt;a href=&quot;#一：第一阶段完善&quot; cla
      
    
    </summary>
    
    
      <category term="-学习 -环境搭建" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0-%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
    
    
  </entry>
  
  <entry>
    <title>助教lab4</title>
    <link href="http://yoursite.com/2020/01/09/2/"/>
    <id>http://yoursite.com/2020/01/09/2/</id>
    <published>2020-01-09T13:03:30.000Z</published>
    <updated>2020-01-09T14:56:05.440Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Lab-4-BST-Binary-Search-Tree"><a href="#Lab-4-BST-Binary-Search-Tree" class="headerlink" title="Lab 4 BST(Binary Search Tree)"></a>Lab 4 BST(Binary Search Tree)</h1><blockquote><p>Xuanhan Tu</p><p>16 Oct 2019</p></blockquote><h2 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h2><p>This lab is designed to help you get familiar with Binary Search Tree , a useful data structure . Your task in this lab is to implement BST individually.</p><h2 id="Specification"><a href="#Specification" class="headerlink" title="Specification"></a>Specification</h2><p>In this part, you can create a data type TreeNode to be the node of a binary search tree.</p><p>following API:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">TreeNode</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> value;</span><br><span class="line">    TreeNode left;</span><br><span class="line">    TreeNode right;</span><br><span class="line"> </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">TreeNode</span><span class="params">(<span class="keyword">int</span> value)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.value = value;</span><br><span class="line">        left  = <span class="keyword">null</span>;</span><br><span class="line">        right = <span class="keyword">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>And then,  you can use TreeNode to create BST structure with the following API:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BinSearchTreeDemo</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> TreeNode root;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Find the right key</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> TreeNode <span class="title">find</span><span class="params">(<span class="keyword">int</span> key)</span></span></span><br><span class="line"><span class="function">    <span class="comment">//Insert node into BST</span></span></span><br><span class="line"><span class="function">    <span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">insert</span><span class="params">(TreeNode root,<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function">    <span class="comment">//Remove a node from BST</span></span></span><br><span class="line"><span class="function">    <span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">remove</span><span class="params">(TreeNode root,<span class="keyword">int</span> x)</span></span></span><br><span class="line"><span class="function">    <span class="comment">//preOrder print Tree</span></span></span><br><span class="line"><span class="function">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">preOrder_iterator</span><span class="params">(TreeNode root)</span></span></span><br><span class="line"><span class="function">    <span class="comment">//inOrder print Tree</span></span></span><br><span class="line"><span class="function">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">inOrder_iterator</span><span class="params">(TreeNode root)</span></span></span><br><span class="line"><span class="function">    <span class="comment">//postOrder print Tree</span></span></span><br><span class="line"><span class="function">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postOrder_iterator</span><span class="params">(TreeNode root)</span></span></span><br><span class="line"><span class="function">    <span class="comment">//return the kth smallest node of the tree</span></span></span><br><span class="line"><span class="function">    <span class="keyword">public</span> TreeNode <span class="title">kthSmallest</span><span class="params">(TreeNode root, <span class="keyword">int</span> k)</span></span></span><br><span class="line"><span class="function">    <span class="comment">//return the depth of the tree</span></span></span><br><span class="line"><span class="function">    <span class="keyword">public</span> <span class="keyword">int</span> <span class="title">FindTreeDeep</span><span class="params">(TreeNode root)</span></span></span><br><span class="line"><span class="function">    <span class="comment">//Find the closest value to target on the tree</span></span></span><br><span class="line"><span class="function">    <span class="keyword">public</span> <span class="keyword">int</span> <span class="title">closestValue</span><span class="params">(TreeNode root, <span class="keyword">double</span> target)</span></span></span><br><span class="line"><span class="function">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="Test-Case"><a href="#Test-Case" class="headerlink" title="Test Case"></a>Test Case</h2><p>Now, you have implemented the structure of BST. </p><p>Your task is to run test case correctly.</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BSTTestDemo</span> </span>&#123;</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//Create BST</span></span><br><span class="line">        <span class="keyword">int</span>[] arr=<span class="keyword">new</span> <span class="keyword">int</span>[]&#123;<span class="number">2</span>,<span class="number">1</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">14</span>,<span class="number">8</span>,<span class="number">9</span>,<span class="number">5</span>,<span class="number">12</span>&#125;;</span><br><span class="line">        BinSerachTreeDemo bst = <span class="keyword">new</span> BinSerachTreeDemo();</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;arr.length;i++)</span><br><span class="line">        &#123;</span><br><span class="line">            bst.insert(<span class="keyword">new</span> TreeNode(arr[i]));</span><br><span class="line">        &#125;</span><br><span class="line">        TreeNode root=bst.root;</span><br><span class="line">        <span class="comment">//Test BST functions</span></span><br><span class="line">        System.out.println((bst.find(<span class="number">4</span>)==<span class="keyword">null</span>)? <span class="string">"null"</span>: <span class="string">"find:"</span>+bst.find(<span class="number">4</span>).value);</span><br><span class="line">        bst.inOrder_iterator(root);</span><br><span class="line">        bst.preOrder_iterator(root);</span><br><span class="line">        System.out.println();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//Insert</span></span><br><span class="line">        System.out.println((bst.find(<span class="number">7</span>)==<span class="keyword">null</span>)? <span class="string">"null"</span>: <span class="string">"find:"</span>+bst.find(<span class="number">7</span>).value);</span><br><span class="line">        bst.insert(root,<span class="number">7</span>);</span><br><span class="line">        System.out.println((bst.find(<span class="number">7</span>)==<span class="keyword">null</span>)? <span class="string">"null"</span>: <span class="string">"find:"</span>+bst.find(<span class="number">7</span>).value);</span><br><span class="line">        bst.inOrder_iterator(root);</span><br><span class="line">        bst.postOrder_iterator(root);</span><br><span class="line">        bst.preOrder_iterator(root);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//Delete</span></span><br><span class="line">        bst.remove(root,<span class="number">8</span>);</span><br><span class="line">        bst.remove(root,<span class="number">4</span>);</span><br><span class="line">        System.out.println();</span><br><span class="line">        bst.inOrder_iterator(root);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//Other functions</span></span><br><span class="line">        System.out.println(<span class="string">"The depth of the tree:"</span>+bst.FindTreeDeep(root));</span><br><span class="line">        System.out.println(bst.kthSmallest(root,<span class="number">3</span>));</span><br><span class="line">        System.out.println(bst.closestValue(root,<span class="number">6.5</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The output is as follow:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">find:4</span><br><span class="line">1 2 3 4 5 8 9 12 14</span><br><span class="line">2 1 3 4 14 8 5 9 12</span><br><span class="line"></span><br><span class="line">null</span><br><span class="line">find:7</span><br><span class="line">1 2 3 4 5 7 8 9 12 14</span><br><span class="line">1 7 5 12 9 8 14 4 3 2</span><br><span class="line">2 1 3 4 14 8 5 7 9 12</span><br><span class="line"></span><br><span class="line">1 2 3 5 7 9 12 14</span><br><span class="line">The depth of the tree:6</span><br><span class="line">3</span><br><span class="line">7</span><br></pre></td></tr></table></figure><h2 id="Bonus"><a href="#Bonus" class="headerlink" title="Bonus"></a>Bonus</h2><p>Traversal can be of two types: recursive and non-recursive. Try to traverse the tree with both of the two methods.</p><h2 id="Deadline"><a href="#Deadline" class="headerlink" title="Deadline"></a>Deadline</h2><blockquote><p>2019/10/18 18:00<br>Please compress your code and upload into the FTP server with filename in format<br>YourStudentID.zip.</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Lab-4-BST-Binary-Search-Tree&quot;&gt;&lt;a href=&quot;#Lab-4-BST-Binary-Search-Tree&quot; class=&quot;headerlink&quot; title=&quot;Lab 4 BST(Binary Search Tree)&quot;&gt;&lt;/a&gt;L
      
    
    </summary>
    
    
      <category term="-学习 -代码题/lab" scheme="http://yoursite.com/categories/%E5%AD%A6%E4%B9%A0-%E4%BB%A3%E7%A0%81%E9%A2%98-lab/"/>
    
    
  </entry>
  
</feed>
